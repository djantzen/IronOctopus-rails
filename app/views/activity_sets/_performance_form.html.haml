.container-fluid{:class => "accordion-group #{defined?(template) && template ? "activity-set-form-template" : ""}"}
  = form_for [@routine.client, Work.new], :remote => true do |form|
    = hidden_field_tag("routine[routine]", @routine.name)
    .accordion-heading.activity-display-name
      .row
        .instructions-modal.modal.hide.fade
          .modal-body
            = markup(activity.instructions)
        .span6
          .btn-group.pull-left
            - unless template or activity_set.comments.eql? ""
              = render :partial => "shared/button", :locals => { :button_class => "activity-set-comments-button btn-small",
                       :icon => "icon-comment" }
            = render :partial => "shared/button", :locals => { :button_class => "show-instructions btn-small",
                     :icon => "icon-info-sign" }
          %a.accordion-toggle{ "data-parent" => "routine-activity-set-list", "data-toggle" => "collapse", :href => "##{template ? nil : activity_set.position}"}
            = activity.name
          .activity-set-done-label.label.label-success
            Done!
      .activity-set-comments
        = render :partial => "activity_sets/create_or_update_comment",
                 :locals => { :comments => template ? "" : activity_set.comments, :disabled => true }
      - if activity_set
        .assigned-set-brief
          - activity_set.activity.metrics.each do |metric|
            - measure_value, unit = get_initial_value(activity_set, metric)
            - if measure_value.defined? || template
              .label.label-info
                = metric.name
                = measure_value.min
                - if measure_value.range?
                  to
                  = measure_value.max
                - if defined? unit and !unit.eql? 'Duration' and !unit.eql?(Unit::NONE)
                  = unit.name.pluralize
    .activity-set-attributes.accordion-body.collapse.in{:id => template ? nil : activity_set.position}
      .accordion-inner.container
        = hidden_field_tag "routine[activity_sets][][activity]", activity.name
        - activity.metrics.each do |metric|
          .row
            - initial_value, unit = get_initial_value(activity_set, metric)
            - unit_options = unit ? [unit.name.pluralize] : metric.units.map { |u| u.name.pluralize }
            - if initial_value.defined? || template
              = render :partial => "routines/measure_selector", :locals => { :measure => metric.name, :interval => 1,       |
                       :initial_value => initial_value, :units => unit_options, :unit => unit, :performance => true }                   |
        .btn-group.performance-control-buttons
          = render :partial => "shared/button", :locals => { :button_class=> "delete-activity-set-button btn-small", :message => "Skip"}
          = render :partial => "shared/button", :locals => { :button_class => "clone-activity-set-button btn-small", |
                   :message => "Repeat", :icon => "icon-repeat" }                                                                       |
          = submit_tag "Done", :class => "perform-activity-set-button btn btn-primary btn-small"
